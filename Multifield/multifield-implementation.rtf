private static final Logger LOG = LoggerFactory.getLogger(SectionTitle.class);

private static final String NODE_CONTACTS ="sectionContacts";

private static final String PROPERTY_TEXT ="text";

private static final String PROPERTY_CONTACT ="contact";

@Inject
@Self
private Resource resource;

@PostConstruct
    protected void init() {
        Node currentNode = resource.adaptTo(Node.class);
        try {
            if (currentNode != null && currentNode.hasNode(NODE_CONTACTS)) {
                Node contactNode = currentNode.getNode(NODE_CONTACTS);
                NodeIterator nodeIterator = contactNode.getNodes();
                String multiText, multiContact;

                while (nodeIterator.hasNext()) {
                    MultiList multiItem = new MultiList();
                    Node child = nodeIterator.nextNode();

                    multiText= child.hasProperty(PROPERTY_TEXT) ?
                            child.getProperty(PROPERTY_TEXT).getString(): EMPTY;
                    multiContact = child.hasProperty(PROPERTY_CONTACT) ?
                            child.getProperty(PROPERTY_CONTACT).getString(): EMPTY;
                    multiItem.setText(multiText);
                    multiItem.setContact(multiContact);
                    this.multiItems.add(multiItem);
                }
            }
        } catch (RepositoryException e) {
            LOG.error("Exception Occurred", e);
        }
    }
